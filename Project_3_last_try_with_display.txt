// This #include statement was automatically added by the Particle IDE.
#include <ThingSpeak.h>

// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_GFX.h>

// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_SSD1306.h>

// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_DHT.h>

// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_BLE.h>

// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_BLE.h>

// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_DHT.h>
#include "application.h"
#include "Adafruit_BLE.h"
#include "Adafruit_BluefruitLE_UART.h"
/****************************************************************
 SEIS 744 : Mano Mishra : Fall 2017 : University of St. Thomas
 Monitor light, temperature and Humidy 
 Particle Photon + Particle.io Webhook + ThingSpeak Integration
 DHT Sensor Source Code Credit : Pete Hoffswell - pete@hoffswell.com
        Based on his original design and code published on web site : 
        https://www.hackster.io/kayakpete/multiple-sensors-particle-photon-thingspeak-3ff8a4
 Many Other codes are from various sources and customized        
*----------------------------------------------------------------
**************************************BLE *********************************************

*********************************************************************
 This is an example for our nRF51822 based Bluefruit LE modules

 Pick one up today in the adafruit shop!

 Adafruit invests time and resources providing this open source code,
 please support Adafruit and open-source hardware by purchasing
 products from Adafruit!

 MIT license, check LICENSE for more information
 All text above, and the splash screen below must be included in
 any redistribution
*********************************************************************/
/*
SoftwareSerial bluefruitSS = SoftwareSerial(BLUEFRUIT_SWUART_TXD_PIN, BLUEFRUIT_SWUART_RXD_PIN);

Adafruit_BluefruitLE_UART ble(bluefruitSS, BLUEFRUIT_UART_MODE_PIN,
                      BLUEFRUIT_UART_CTS_PIN, BLUEFRUIT_UART_RTS_PIN);
*/

// Optional, set to -1 her and leave MODE unconnected if not using


#define DHTPIN 2
#define DHTTYPE DHT11 // DHT11 Module
#define publish_cycle 60000 // Only publish every 60 seconds
#define BUFSIZE                        128   // Size of the read buffer for incoming data
#define VERBOSE_MODE                   true  // If set to 'true' enables debug output
#define BLUEFRUIT_SPI_CS               A2
#define BLUEFRUIT_SPI_IRQ              D3
#define BLUEFRUIT_SPI_RST              D2    // Optional but recommended, set to -1 if unused
#define FACTORYRESET_ENABLE      1
#define MODE_LED_BEHAVIOUR          "MODE"
#define BLUEFRUIT_UART_MODE_PIN	 	   -1   // not using, so set to -1
 
//for display : try later
//use hardware SPI
#define OLED_DC     D3
#define OLED_CS     D4
#define OLED_RESET  D5

Adafruit_SSD1306 display(OLED_DC, OLED_RESET, OLED_CS);

#define LOGO16_GLCD_HEIGHT 32
#define LOGO16_GLCD_WIDTH  16




// Create the bluefruit object, either software serial...uncomment these lines
Adafruit_BluefruitLE_UART ble(&Serial1, BLUEFRUIT_UART_MODE_PIN);

// A small helper
void error(const char *err) {
  //Serial.println(err);
  while (1);
}
//
// trying thingsspeak publish / weather subscribe
TCPClient client;
String hightemp, lowtemp, month, day, year, hour, minute, period, date, date_time, current_time, midday;
int changed_hour, current_hour, current_minute;

const String myWriteAPIKey = "MMDB7JI6GCRF0MS0"; // thingspeak API for mano_weather_station event
unsigned long myChannelNumber = 382357;

float field_1; //high temp
float field_2; //low temp
float field_3; //avg temp
int   field_4; //moon phase
float field_5; //moon rise format - hour.minute
float field_6; //moon set format - hour.minute
float field_7; //sunrise format - hour.minute
float field_8; //sunset format - hour.minute

float  avg_temp; //takes the high - low / 2 for the average
int    ageofmoon;
float  sunrise, sunset, moonrise, moonset, hightemp_float, lowtemp_float;
String todays_weather, conditions,todays_astronomy;
float  now_temp;
String cond_weather_icon, cond_weather_icon_url, cond_weather_forecast_url, cond_weather_history_url, cond_weather;

//
const String key = "RYIQL42LRXO0FI8L"; // Thingspeak api write key for my sensor event project_mano

int led = D7; // Sensor Read Light
int led1 = D0;
int photoCell = A0;
int power = A5; // Photocell power.  An analog pin to gives a more steady voltage.
int light; // Light
double tempF; // Temperature F
double tempC; // Temperature C
double humidity; // Humidity
double vibration; // vibration
unsigned int lastPublish = 0;
char action = 'P';
DHT dht(DHTPIN, DHTTYPE);
int vbsensor = D1;
// functions....................................
int ledToggle(String command) {
    if (command=="on") {
        digitalWrite(led1,HIGH);
        return 1;
    }
    else if (command=="off") {
        digitalWrite(led1,LOW);
        return 0;
    }
    else {
        return -1;
    }
}

int buzzerPin = D3;

void setup() {
    
    display.begin(SSD1306_SWITCHCAPVCC);
    
    ThingSpeak.begin(client);

    Particle.subscribe("hook-response/get_temp_weather", temp,MY_DEVICES); // this handler is writing to OLED !!
    Particle.subscribe("hook-response/get_conditions_weather", conditions_weather,MY_DEVICES);
    Particle.subscribe("hook-response/get_astronomy_time", astronomy_weather,MY_DEVICES);


    // BLE set up 
    while (!Serial);  // required for Flora & Micro
    delay(500);
    pinMode(led1, OUTPUT);
    Particle.function("led",ledToggle);
    Serial.begin(9600);
  //Serial.println(F("Adafruit Bluefruit AT Command Example"));
  //Serial.println(F("-------------------------------------"));

  /* Initialise the module */
  Serial.print(F("Initialising the Bluefruit LE module: "));

  if ( !ble.begin(VERBOSE_MODE) )
  {
    error(F("Couldn't find Bluefruit, make sure it's in CoMmanD mode & check wiring?"));
  }
  Serial.println( F("OK!") );

  if ( FACTORYRESET_ENABLE )
  {
    /* Perform a factory reset to make sure everything is in a known state */
    Serial.println(F("Performing a factory reset: "));
    if ( ! ble.factoryReset() ){
      error(F("Couldn't factory reset"));
    }
  }

  /* Disable command echo from Bluefruit */
  ble.echo(false);

  Serial.println("Requesting Bluefruit info:");
  /* Print Bluefruit information */
  ble.info();
   ble.sendCommandCheckOK("AT+HWModeLED=" MODE_LED_BEHAVIOUR);
  // Set module to DATA mode
  Serial.println( F("Switching to DATA mode!") );
  ble.setMode(BLUEFRUIT_MODE_DATA);

/**************************************************************************/
/*!
    @brief  Constantly poll for new command or response data
*/
/**************************************************************************/
    // Set Pin Modes
    pinMode(led,OUTPUT);
    pinMode(photoCell,INPUT);
    pinMode(power,OUTPUT);
    pinMode(vbsensor,INPUT);
    digitalWrite(power,HIGH); // Turn on power source for photoCell
    digitalWrite(led,LOW); 
    
    // Connect variables to particle cloud
    // This allows you to save data to particle.io, and run commands against it such as 
   // "particle variable Photon get light"
    Particle.variable("light", &light, INT);
    Particle.variable("tempF", &tempF, DOUBLE);
    Particle.variable("tempC", &tempC, DOUBLE);
    Particle.variable("humidity", &humidity, DOUBLE);
    Particle.variable("vibration", &vibration, DOUBLE);
    dht.begin();
    Serial.begin(9600);
    delay(10000);
    // display code
    display.clearDisplay(); //clears the buffer oled splashscreen

 static const unsigned char startup_display[] =
 {
    0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0c, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xc0, 0xe0, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x40, 0x00,
    0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0d, 0x01, 0xc0, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x03, 0x80, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x12, 0x18, 0x86, 0x00, 0x00,
    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x10, 0x18, 0x0c, 0x00, 0x00,
    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x18, 0x58, 0x00, 0x00,
    0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x18, 0xe0, 0x38, 0x00, 0x00,
    0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x20, 0x0f, 0xff, 0xfe, 0x03, 0xe0,
    0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0f, 0xff, 0xff, 0x9f, 0xc0,
    0x00, 0x40, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x9f, 0xff, 0xff, 0xfd, 0x80,
    0x00, 0x40, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0xfd, 0xff, 0xe1, 0x00,
    0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x0e, 0x3f, 0xf0, 0x3f, 0xe2, 0x00,
    0x00, 0x7c, 0x80, 0x02, 0xfc, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x3f, 0xe0, 0x3f, 0xe2, 0x00,
    0x01, 0x81, 0x00, 0x03, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x1f, 0xf0, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x01, 0x0f, 0xc0, 0x01, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x1f, 0xf8, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x00, 0x90, 0x30, 0x00, 0x80, 0x00, 0x00, 0xff, 0xe0, 0x1f, 0xf8, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x3f, 0xff, 0x80,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x40, 0x00, 0x04, 0xff, 0xf8, 0xff, 0xff, 0xf0,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x30, 0xff, 0xff, 0xff, 0xf8, 0x38,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xfc, 0x00, 0x01, 0xf0, 0xff, 0xff, 0xff, 0xf8, 0x3a,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x03, 0x00, 0x00, 0x70, 0xff, 0xff, 0xff, 0xf8, 0x80,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x40, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x40, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x20, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfc, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x20, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf6, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x20, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe3, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x20, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe1, 0x80,
    0xc0, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x20, 0x00, 0x04, 0x1f, 0xff, 0xff, 0xe1, 0xc0,
    0xc0, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x20, 0x00, 0x0f, 0xef, 0xff, 0xff, 0x9e, 0xc0,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x30, 0x00, 0x1f, 0x87, 0xff, 0xff, 0x80, 0x20,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x18, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x80, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xc0, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x04, 0x00, 0x00, 0x08, 0xc0, 0xd0, 0xc0, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x04, 0x00, 0x00, 0x09, 0xc0, 0xc8, 0x60, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x80, 0xc2, 0x60, 0x00,
    0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x08, 0xc1, 0xe0, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x0e, 0x05, 0x80, 0x60, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x18, 0x03, 0x80, 0x20, 0x00,
    0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x20, 0x03, 0x80, 0x20, 0x00,
    0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x41, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x41, 0x04, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0xc3, 0x10, 0x80, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x22, 0x88, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x81, 0x10, 0x40, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x22, 0x88, 0x70, 0x3c, 0x7d, 0x78, 0x38, 0x5d, 0x00, 0x90, 0x45, 0xe0, 0xf0, 0xf8, 0x00,
    0x00, 0x22, 0x88, 0x88, 0x42, 0x21, 0x84, 0x44, 0x61, 0x00, 0x90, 0x46, 0x11, 0x08, 0x40, 0x00,
    0x00, 0x12, 0x91, 0x04, 0x02, 0x21, 0x04, 0x82, 0x41, 0x00, 0x90, 0x84, 0x12, 0x04, 0x40, 0x00,
    0x00, 0x14, 0x51, 0xfc, 0x7e, 0x21, 0x04, 0xfe, 0x41, 0x00, 0x9f, 0x04, 0x12, 0x04, 0x40, 0x00,
    0x00, 0x14, 0x51, 0x00, 0x82, 0x21, 0x04, 0x80, 0x41, 0x00, 0x90, 0x84, 0x12, 0x04, 0x40, 0x00,
    0x00, 0x14, 0x51, 0x00, 0x82, 0x21, 0x04, 0x80, 0x40, 0x81, 0x10, 0x44, 0x12, 0x04, 0x40, 0x00,
    0x00, 0x08, 0x20, 0x84, 0x86, 0x21, 0x04, 0x42, 0x40, 0xc3, 0x10, 0x24, 0x11, 0x08, 0x40, 0x00,
    0x00, 0x08, 0x20, 0x78, 0x7a, 0x1d, 0x04, 0x3c, 0x40, 0x3c, 0x10, 0x14, 0x10, 0xf0, 0x38, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
 };

  display.drawBitmap(0,0,startup_display,128,64,1);
  display.display();
  delay(2000);
} //setup
/*****************************************************************************************
 * ---------------------------------------------------------------------------------------
 * 
 */
 
void loop() {
  //thingspeak / weather publish/subscribe
  // why it is publishing ???
//
  String data = String(10); //gives the value a buffer to work properly
  Time.zone(-6.00);
  current_time = Time.format(Time.now(), "%I:%M %p");
  
  Particle.publish("get_conditions_weather", data);
  delay(5000);
  Particle.publish("get_temp_weather", data);
  delay(5000);
  todays_weather = ("Current Weather, T:" + current_time + ", D: " + date + ", High T: " + hightemp + ", Low T: " + lowtemp + ", Current T: " + String(now_temp, 1) + ", Cond: " + cond_weather + " " + cond_weather_icon_url);
  Particle.publish("send_weather_info", todays_weather);
  delay(5000);
  Particle.publish("get_astronomy_time", data);
  delay(5000);
 //
  writetothingspeak();  // directly publishing to thingspeak !!
//
  delay(5000);
//
  todays_astronomy = ("field_1: " + String(field_1, 1) + ", field_2: " + String(field_2, 1) + ", field_3: " + String(field_3, 1) + ", field_4: " + String(field_4) + ", field_5: " + String(field_5, 2) + ", field_6: " + String(field_6, 2) + ", field_7: " + String(field_7, 2) + ", field_8: " + String(field_8, 2));
  Particle.publish("send_astronomy_data", todays_astronomy,PRIVATE);
  //delay(60000 * 60 * 24); //24 hours

// end of weather subscribe

  unsigned long now = millis();
  digitalWrite(led,HIGH); // Signal read sequence led
  // read sensors
  light = analogRead(photoCell);
  delay(100);  // is this needed?
  humidity = dht.getHumidity();
  tempC = dht.getTempCelcius();
  tempF = dht.getTempFarenheit();
  vibration = digitalRead(vbsensor);
  // DHT Read ok?
  if (isnan(humidity) || isnan(tempF) || isnan(tempC)) {
    Serial.println("");
    Serial.println("Failed to read from DHT sensor!");
    Serial.println("humidity=" + String(humidity) + " tempF=" + String(tempF) + " tempC=" + String(tempC));
    Serial.println("");
    return; // exit loop and try again
  }
  // Display to serial
  Serial.println();
  Serial.print("humidity=" + String(humidity) + " tempF=" + String(tempF) + " tempC=" + String(tempC) + " light=" + String(light));
  delay(200);
  int c;
  // evaluate BLE command ..........................
  if ( ble.available() )
       c = ble.read();
  if (c == 80 ) {// publish
      action = 'P';
      ledToggle("off");
  }
  else if ( c == 83) {
      action = 'S';
      Particle.publish("Stop Publishing");
      ledToggle("on"); // turn on the LED !!
      tone(buzzerPin , 2551,25); // play a buzzer
  }
  // else , keep the last command !!
  // Publish to thinkspeak
  if ((now - lastPublish) > publish_cycle && action == 'P') { // added the action condition
       Particle.publish("project_mano", "{ \"1\": \"" + String(humidity) + "\"," +
       "\"2\": \"" + String(tempC) + "\"," +
       "\"3\": \"" + String(tempF) + "\"," +
       "\"4\": \"" + String(light) + "\"," +
       "\"5\": \"" + String(vibration) + "\"," +
       "\"k\": \"" + key + "\" }", 60, PRIVATE);
    lastPublish = now;
    Serial.println(" - Published!");
  } else {
      Serial.println();
  }
  digitalWrite(led,LOW);
  delay(2000); // Wait 2 seconds before next loop
} // loop

// weather publish / subscribe handlers :

void writetothingspeak(void)
{
  field_1 = hightemp_float;
  field_2 = lowtemp_float;
  field_3 = (hightemp_float - lowtemp_float) / 2 ;
  field_4 = ageofmoon;
  field_5 = moonrise;
  field_6 = moonset;
  field_7 = sunrise;
  field_8 = sunset;

  ThingSpeak.writeField(myChannelNumber, 1, field_1, myWriteAPIKey);

  delay(15000);
  ThingSpeak.writeField(myChannelNumber, 2, field_2, myWriteAPIKey);

  delay(15000);
  ThingSpeak.writeField(myChannelNumber, 3, field_3, myWriteAPIKey);

  delay(15000);
  ThingSpeak.writeField(myChannelNumber, 4, field_4, myWriteAPIKey);

  delay(15000);
  ThingSpeak.writeField(myChannelNumber, 5, field_5, myWriteAPIKey);

  delay(15000);
  ThingSpeak.writeField(myChannelNumber, 6, field_6, myWriteAPIKey);

  delay(15000);
  ThingSpeak.writeField(myChannelNumber, 7, field_7, myWriteAPIKey);

  delay(15000);
  ThingSpeak.writeField(myChannelNumber, 8, field_8, myWriteAPIKey);

  delay(5000);
}

void astronomy_weather(const char *event, const char *data) {

    int sunrise_hour, sunset_hour, moonrise_hour, moonset_hour = 0;
    float sunrise_minute, sunset_minute, moonrise_minute, moonset_minute = 0;

    String my_str2 = String(data);
    char my_str2Buffer[64] = "";
    my_str2.toCharArray(my_str2Buffer, 64);

    ageofmoon = atoi(strtok(my_str2Buffer, "\"~"));
    sunrise_hour = atoi(strtok(NULL, "~"));
    sunrise_minute = atoi(strtok(NULL, "~"));
    sunset_hour = atoi(strtok(NULL, "~"));
    sunset_minute = atoi(strtok(NULL, "~"));
    moonrise_hour = atoi(strtok(NULL, "~"));
    moonrise_minute = atoi(strtok(NULL, "~"));
    moonset_hour = atoi(strtok(NULL, "~"));
    moonset_minute = atoi(strtok(NULL, "~"));

    sunrise_minute = sunrise_minute * 0.01;
    sunset_minute = sunset_minute * 0.01;
    moonrise_minute = moonrise_minute * 0.01;
    moonset_minute = moonset_minute * 0.01;

    sunrise = sunrise_hour + sunrise_minute;
    sunset = sunset_hour + sunset_minute;
    moonrise = moonrise_hour + moonrise_minute;
    moonset = moonset_hour + moonset_minute;

    delay(1000);

}

void conditions_weather(const char *event, const char *data) {

    String my_str = String(data);
    char my_strBuffer[64] = "";
    my_str.toCharArray(my_strBuffer, 64);

    now_temp = atof(strtok(my_strBuffer, "\"~"));
    cond_weather = strtok(NULL, "~");
    cond_weather_icon = strtok(NULL, "~");
    cond_weather_icon_url = strtok(NULL, "~");
    cond_weather_forecast_url = strtok(NULL, "~");
    cond_weather_history_url = strtok(NULL, "~");

    delay(1010);
}

void temp(const char *event, const char *data) {

  String str = String(data);
  char strBuffer[64] = "";
  str.toCharArray(strBuffer, 64);

  date_time = strtok(strBuffer, "\"~"); //These all depend on how you setup your webhook
  date_time.remove(8, 4);
  date = strtok(NULL, "~");
  period = strtok(NULL, "~");
  hightemp = strtok(NULL, "~");
  lowtemp = strtok(NULL, "~");
  hightemp_float = atof(hightemp);
  lowtemp_float = atof(lowtemp);

  delay(1010);
  //write_to_screen();
}

void write_to_screen(void)
  {

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);

  display.setCursor(0,0);
  display.println("Date");
  display.setCursor(0,10);
  display.println(date);
  display.setCursor(0,20);
  display.println("");
  display.setCursor(0,30);

  display.println("Time");
  display.setCursor(0,40);
  display.println(current_time);
  display.display();

  display.setCursor(70,0);
  display.println("High Temp");
  display.setCursor(70,10);
  display.println(hightemp);
  display.setCursor(70,20);
  display.println("");
  display.setCursor(70,30);
  display.println("Low Temp");
  display.setCursor(70,40);
  display.println(lowtemp);
  display.display();

  digitalWrite(D7, LOW);
  delay(1010);
  }

